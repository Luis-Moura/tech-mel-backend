package com.tech_mel.tech_mel.application.jobs;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import com.tech_mel.tech_mel.domain.model.User;
import com.tech_mel.tech_mel.domain.port.output.UserRepositoryPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Component
@RequiredArgsConstructor
@Slf4j
public class AdminInitializer implements ApplicationRunner {

    private final UserRepositoryPort userRepositoryPort;
    private final PasswordEncoder passwordEncoder;

    @Value("${app.admin.default.email:admin@techmel.com}")
    private String defaultAdminEmail;

    @Value("${app.admin.default.password:Admin@TechMel2024}")
    private String defaultAdminPassword;

    @Value("${app.admin.default.name:Administrador Principal}")
    private String defaultAdminName;

    @Override
    public void run(ApplicationArguments args) {
        createDefaultAdminIfNotExists();
    }

    private void createDefaultAdminIfNotExists() {
        log.info("Verificando se existe administrador prim√°rio no sistema...");

        // Verifica se j√° existe um admin prim√°rio
        List<User> primaryAdmins = userRepositoryPort.findByIsPrimary(true);

        if (!primaryAdmins.isEmpty()) {
            log.info("Administrador prim√°rio j√° existe: {}", primaryAdmins.get(0).getEmail());
            return;
        }

        // Verifica se j√° existe um usu√°rio com o email padr√£o
        if (userRepositoryPort.findByEmail(defaultAdminEmail).isPresent()) {
            log.warn("Usu√°rio com email {} j√° existe, mas n√£o √© administrador prim√°rio. " +
                    "Considere verificar as configura√ß√µes.", defaultAdminEmail);
            return;
        }

        log.info("Criando administrador prim√°rio padr√£o...");

        try {
            User defaultAdmin = User.builder()
                    .email(defaultAdminEmail)
                    .name(defaultAdminName)
                    .password(passwordEncoder.encode(defaultAdminPassword))
                    .role(User.Role.ADMIN)
                    .emailVerified(true)
                    .enabled(true)
                    .locked(false)
                    .isActive(true)
                    .isPrimary(true) // Administrador prim√°rio
                    .requiresPasswordChange(false) // N√£o for√ßa mudan√ßa na primeira instala√ß√£o
                    .authProvider(User.AuthProvider.LOCAL)
                    .availableHives(Integer.MAX_VALUE) // Admin prim√°rio tem acesso ilimitado
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build();

            User savedAdmin = userRepositoryPort.save(defaultAdmin);

            log.info("‚úÖ Administrador prim√°rio criado com sucesso!");
            log.info("üìß Email: {}", savedAdmin.getEmail());
            log.info("üîë Senha: {} (Altere ap√≥s o primeiro login)", defaultAdminPassword);
            log.info("üÜî ID: {}", savedAdmin.getId());

            log.warn("‚ö†Ô∏è  IMPORTANTE: Altere a senha padr√£o ap√≥s o primeiro login por motivos de seguran√ßa!");

        } catch (Exception e) {
            log.error("‚ùå Erro ao criar administrador prim√°rio padr√£o: {}", e.getMessage(), e);
        }
    }
}
